name: Main merge workflow

on:
  push:
    branches:
      - main

jobs:
  set-build-manifest:
    uses: ./.github/workflows/build-manifest.yml
    
  build-site:
    needs: set-build-manifest
    if: ${{ needs.set-build-manifest.outputs.build-site == 'true' }}
    uses: ./.github/workflows/build-image.yml
    with:
      image-name: nick-wisnewski-io
      dockerfile: docker/site/Dockerfile
      tag: "v${{ github.run_number }}"
    secrets: inherit

  build-ingress:
    needs: set-build-manifest
    if: ${{ needs.set-build-manifest.outputs.build-ingress == 'true' }}
    uses: ./.github/workflows/build-image.yml
    with:
      image-name: ingress-server
      dockerfile: docker/ingress-server/Dockerfile
      tag: "v${{ github.run_number }}"
    secrets: inherit

  deploy-site:
    needs: [set-build-manifest, build-site, build-ingress]
    runs-on: ubuntu-latest
    if: ${{ needs.set-build-manifest.outputs.build-site == 'true' ||
            needs.set-build-manifest.outputs.build-ingress == 'true' ||
            needs.set-build-manifest.outputs.deploy-site-resources == 'true' ||
            needs.set-build-manifest.outputs.deploy-k8s-resources == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Get terraform version
        id: tfvenv
        uses: juliangruber/read-file-action@v1
        with:
          path: terraform/modules/site-resources/.terraform-version

      - name: Install terraform 
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.tfenv.outputs.content }}
      
      - name: Deploy site resources
        if: ${{ needs.set-build-manifest.outputs.deploy-site-resources == 'true' || needs.set-build-manifest.outputs.deploy-k8s-resources == 'true' }} 
        run: |
          terraform init
          terraform apply --auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
          TF_VAR_region: ${{ secrets.REGION }}
          TF_VAR_zone : ${{ secrets.ZONE }}
          TF_VAR_subnetwork_cidr: ${{ secrets.SUBNET_CIDR }}
          TF_VAR_services_cidr : ${{ secrets.SERVICES_CIDR }}
          TF_VAR_pods_cidr: ${{ secrets.PODS_CIDR }}
          APPLY: ${{ needs.set-build-manifest.outputs.deploy-site-resources }}
        working-directory: terraform/modules/site-resources

      - name: Deploy k8s resources
        if: ${{ needs.set-build-manifest.outputs.deploy-k8s-resources == 'true' }}
        run: |
          terraform init
          terraform apply --auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
          TF_VAR_region: ${{ secrets.REGION }}
        working-directory: terraform/modules/k8s-resources

      - name: Authenticate to GCP
        if: ${{ needs.set-build-manifest.outputs.build-site == 'true' || needs.set-build-manifest.outputs.build-ingress == 'true' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install kubectl
        if: ${{ needs.set-build-manifest.outputs.build-site == 'true' || needs.set-build-manifest.outputs.build-ingress == 'true' }}
        uses: azure/setup-kubectl@v3
        with: 
          version: 1.29.0

      - name: Authenticate to GKE
        if: ${{ needs.set-build-manifest.outputs.build-site == 'true' || needs.set-build-manifest.outputs.build-ingress == 'true' }}
        run: |
          gcloud container clusters get-credentials wisnewski-k8s-cluster-prod  \
            --region ${{ secrets.REGION }} \
            --project ${{ secrets.PROJECT_ID }}

      - name: Restart site deployment
        if: ${{ needs.set-build-manifest.outputs.build-site == 'true' }}
        run: |
          kubectl scale deployment site --replicas=0 -n wisnewski-io
          kubectl scale deployment site --replicas=1 -n wisnewski-io

      - name: Restart ingress-server deployment
        if: ${{ needs.set-build-manifest.outputs.build-site == 'true' }}
        run: |
          kubectl scale deployment ingress-server --replicas=0 -n wisnewski-io
          kubectl scale deployment ingress-server --replicas=1 -n wisnewski-io


  